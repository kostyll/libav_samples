# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simple_ffmpeg', [dirname(__file__)])
        except ImportError:
            import _simple_ffmpeg
            return _simple_ffmpeg
        if fp is not None:
            try:
                _mod = imp.load_module('_simple_ffmpeg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _simple_ffmpeg = swig_import_helper()
    del swig_import_helper
else:
    import _simple_ffmpeg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def die(*args):
  return _simple_ffmpeg.die(*args)
die = _simple_ffmpeg.die
class SourceOrDestinatio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SourceOrDestinatio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceOrDestinatio, name)
    __repr__ = _swig_repr
    __swig_setmethods__["video_st"] = _simple_ffmpeg.SourceOrDestinatio_video_st_set
    __swig_getmethods__["video_st"] = _simple_ffmpeg.SourceOrDestinatio_video_st_get
    if _newclass:video_st = _swig_property(_simple_ffmpeg.SourceOrDestinatio_video_st_get, _simple_ffmpeg.SourceOrDestinatio_video_st_set)
    __swig_setmethods__["audio_st"] = _simple_ffmpeg.SourceOrDestinatio_audio_st_set
    __swig_getmethods__["audio_st"] = _simple_ffmpeg.SourceOrDestinatio_audio_st_get
    if _newclass:audio_st = _swig_property(_simple_ffmpeg.SourceOrDestinatio_audio_st_get, _simple_ffmpeg.SourceOrDestinatio_audio_st_set)
    __swig_setmethods__["video"] = _simple_ffmpeg.SourceOrDestinatio_video_set
    __swig_getmethods__["video"] = _simple_ffmpeg.SourceOrDestinatio_video_get
    if _newclass:video = _swig_property(_simple_ffmpeg.SourceOrDestinatio_video_get, _simple_ffmpeg.SourceOrDestinatio_video_set)
    __swig_setmethods__["audio"] = _simple_ffmpeg.SourceOrDestinatio_audio_set
    __swig_getmethods__["audio"] = _simple_ffmpeg.SourceOrDestinatio_audio_get
    if _newclass:audio = _swig_property(_simple_ffmpeg.SourceOrDestinatio_audio_get, _simple_ffmpeg.SourceOrDestinatio_audio_set)
    __swig_setmethods__["url"] = _simple_ffmpeg.SourceOrDestinatio_url_set
    __swig_getmethods__["url"] = _simple_ffmpeg.SourceOrDestinatio_url_get
    if _newclass:url = _swig_property(_simple_ffmpeg.SourceOrDestinatio_url_get, _simple_ffmpeg.SourceOrDestinatio_url_set)
    __swig_setmethods__["vc"] = _simple_ffmpeg.SourceOrDestinatio_vc_set
    __swig_getmethods__["vc"] = _simple_ffmpeg.SourceOrDestinatio_vc_get
    if _newclass:vc = _swig_property(_simple_ffmpeg.SourceOrDestinatio_vc_get, _simple_ffmpeg.SourceOrDestinatio_vc_set)
    __swig_setmethods__["ac"] = _simple_ffmpeg.SourceOrDestinatio_ac_set
    __swig_getmethods__["ac"] = _simple_ffmpeg.SourceOrDestinatio_ac_get
    if _newclass:ac = _swig_property(_simple_ffmpeg.SourceOrDestinatio_ac_get, _simple_ffmpeg.SourceOrDestinatio_ac_set)
    __swig_setmethods__["vctx"] = _simple_ffmpeg.SourceOrDestinatio_vctx_set
    __swig_getmethods__["vctx"] = _simple_ffmpeg.SourceOrDestinatio_vctx_get
    if _newclass:vctx = _swig_property(_simple_ffmpeg.SourceOrDestinatio_vctx_get, _simple_ffmpeg.SourceOrDestinatio_vctx_set)
    __swig_setmethods__["actx"] = _simple_ffmpeg.SourceOrDestinatio_actx_set
    __swig_getmethods__["actx"] = _simple_ffmpeg.SourceOrDestinatio_actx_get
    if _newclass:actx = _swig_property(_simple_ffmpeg.SourceOrDestinatio_actx_get, _simple_ffmpeg.SourceOrDestinatio_actx_set)
    __swig_setmethods__["ctx"] = _simple_ffmpeg.SourceOrDestinatio_ctx_set
    __swig_getmethods__["ctx"] = _simple_ffmpeg.SourceOrDestinatio_ctx_get
    if _newclass:ctx = _swig_property(_simple_ffmpeg.SourceOrDestinatio_ctx_get, _simple_ffmpeg.SourceOrDestinatio_ctx_set)
    def __init__(self): 
        this = _simple_ffmpeg.new_SourceOrDestinatio()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simple_ffmpeg.delete_SourceOrDestinatio
    __del__ = lambda self : None;
SourceOrDestinatio_swigregister = _simple_ffmpeg.SourceOrDestinatio_swigregister
SourceOrDestinatio_swigregister(SourceOrDestinatio)


def open_input_source(*args):
  return _simple_ffmpeg.open_input_source(*args)
open_input_source = _simple_ffmpeg.open_input_source

def get_video_stream(*args):
  return _simple_ffmpeg.get_video_stream(*args)
get_video_stream = _simple_ffmpeg.get_video_stream

def get_audio_stream(*args):
  return _simple_ffmpeg.get_audio_stream(*args)
get_audio_stream = _simple_ffmpeg.get_audio_stream

def alloc_audio_frame(*args):
  return _simple_ffmpeg.alloc_audio_frame(*args)
alloc_audio_frame = _simple_ffmpeg.alloc_audio_frame

def build_audio_swr(*args):
  return _simple_ffmpeg.build_audio_swr(*args)
build_audio_swr = _simple_ffmpeg.build_audio_swr

def open_source(*args):
  return _simple_ffmpeg.open_source(*args)
open_source = _simple_ffmpeg.open_source

def open_output(*args):
  return _simple_ffmpeg.open_output(*args)
open_output = _simple_ffmpeg.open_output
class TranscodingContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranscodingContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TranscodingContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["swr_ctx"] = _simple_ffmpeg.TranscodingContext_swr_ctx_set
    __swig_getmethods__["swr_ctx"] = _simple_ffmpeg.TranscodingContext_swr_ctx_get
    if _newclass:swr_ctx = _swig_property(_simple_ffmpeg.TranscodingContext_swr_ctx_get, _simple_ffmpeg.TranscodingContext_swr_ctx_set)
    __swig_setmethods__["sws_ctx"] = _simple_ffmpeg.TranscodingContext_sws_ctx_set
    __swig_getmethods__["sws_ctx"] = _simple_ffmpeg.TranscodingContext_sws_ctx_get
    if _newclass:sws_ctx = _swig_property(_simple_ffmpeg.TranscodingContext_sws_ctx_get, _simple_ffmpeg.TranscodingContext_sws_ctx_set)
    __swig_setmethods__["curr_packet"] = _simple_ffmpeg.TranscodingContext_curr_packet_set
    __swig_getmethods__["curr_packet"] = _simple_ffmpeg.TranscodingContext_curr_packet_get
    if _newclass:curr_packet = _swig_property(_simple_ffmpeg.TranscodingContext_curr_packet_get, _simple_ffmpeg.TranscodingContext_curr_packet_set)
    __swig_setmethods__["video_packet"] = _simple_ffmpeg.TranscodingContext_video_packet_set
    __swig_getmethods__["video_packet"] = _simple_ffmpeg.TranscodingContext_video_packet_get
    if _newclass:video_packet = _swig_property(_simple_ffmpeg.TranscodingContext_video_packet_get, _simple_ffmpeg.TranscodingContext_video_packet_set)
    __swig_setmethods__["copy_current_packet"] = _simple_ffmpeg.TranscodingContext_copy_current_packet_set
    __swig_getmethods__["copy_current_packet"] = _simple_ffmpeg.TranscodingContext_copy_current_packet_get
    if _newclass:copy_current_packet = _swig_property(_simple_ffmpeg.TranscodingContext_copy_current_packet_get, _simple_ffmpeg.TranscodingContext_copy_current_packet_set)
    __swig_setmethods__["audio_packet"] = _simple_ffmpeg.TranscodingContext_audio_packet_set
    __swig_getmethods__["audio_packet"] = _simple_ffmpeg.TranscodingContext_audio_packet_get
    if _newclass:audio_packet = _swig_property(_simple_ffmpeg.TranscodingContext_audio_packet_get, _simple_ffmpeg.TranscodingContext_audio_packet_set)
    __swig_setmethods__["ivframe"] = _simple_ffmpeg.TranscodingContext_ivframe_set
    __swig_getmethods__["ivframe"] = _simple_ffmpeg.TranscodingContext_ivframe_get
    if _newclass:ivframe = _swig_property(_simple_ffmpeg.TranscodingContext_ivframe_get, _simple_ffmpeg.TranscodingContext_ivframe_set)
    __swig_setmethods__["ovframe"] = _simple_ffmpeg.TranscodingContext_ovframe_set
    __swig_getmethods__["ovframe"] = _simple_ffmpeg.TranscodingContext_ovframe_get
    if _newclass:ovframe = _swig_property(_simple_ffmpeg.TranscodingContext_ovframe_get, _simple_ffmpeg.TranscodingContext_ovframe_set)
    __swig_setmethods__["iaframe"] = _simple_ffmpeg.TranscodingContext_iaframe_set
    __swig_getmethods__["iaframe"] = _simple_ffmpeg.TranscodingContext_iaframe_get
    if _newclass:iaframe = _swig_property(_simple_ffmpeg.TranscodingContext_iaframe_get, _simple_ffmpeg.TranscodingContext_iaframe_set)
    __swig_setmethods__["oaframe"] = _simple_ffmpeg.TranscodingContext_oaframe_set
    __swig_getmethods__["oaframe"] = _simple_ffmpeg.TranscodingContext_oaframe_get
    if _newclass:oaframe = _swig_property(_simple_ffmpeg.TranscodingContext_oaframe_get, _simple_ffmpeg.TranscodingContext_oaframe_set)
    __swig_setmethods__["dest_pict_buffer_size"] = _simple_ffmpeg.TranscodingContext_dest_pict_buffer_size_set
    __swig_getmethods__["dest_pict_buffer_size"] = _simple_ffmpeg.TranscodingContext_dest_pict_buffer_size_get
    if _newclass:dest_pict_buffer_size = _swig_property(_simple_ffmpeg.TranscodingContext_dest_pict_buffer_size_get, _simple_ffmpeg.TranscodingContext_dest_pict_buffer_size_set)
    __swig_setmethods__["dest_pict_buffer"] = _simple_ffmpeg.TranscodingContext_dest_pict_buffer_set
    __swig_getmethods__["dest_pict_buffer"] = _simple_ffmpeg.TranscodingContext_dest_pict_buffer_get
    if _newclass:dest_pict_buffer = _swig_property(_simple_ffmpeg.TranscodingContext_dest_pict_buffer_get, _simple_ffmpeg.TranscodingContext_dest_pict_buffer_set)
    __swig_setmethods__["internal_ptr"] = _simple_ffmpeg.TranscodingContext_internal_ptr_set
    __swig_getmethods__["internal_ptr"] = _simple_ffmpeg.TranscodingContext_internal_ptr_get
    if _newclass:internal_ptr = _swig_property(_simple_ffmpeg.TranscodingContext_internal_ptr_get, _simple_ffmpeg.TranscodingContext_internal_ptr_set)
    __swig_setmethods__["before_decode_video"] = _simple_ffmpeg.TranscodingContext_before_decode_video_set
    __swig_getmethods__["before_decode_video"] = _simple_ffmpeg.TranscodingContext_before_decode_video_get
    if _newclass:before_decode_video = _swig_property(_simple_ffmpeg.TranscodingContext_before_decode_video_get, _simple_ffmpeg.TranscodingContext_before_decode_video_set)
    __swig_setmethods__["after_decode_video"] = _simple_ffmpeg.TranscodingContext_after_decode_video_set
    __swig_getmethods__["after_decode_video"] = _simple_ffmpeg.TranscodingContext_after_decode_video_get
    if _newclass:after_decode_video = _swig_property(_simple_ffmpeg.TranscodingContext_after_decode_video_get, _simple_ffmpeg.TranscodingContext_after_decode_video_set)
    __swig_setmethods__["after_convert_video"] = _simple_ffmpeg.TranscodingContext_after_convert_video_set
    __swig_getmethods__["after_convert_video"] = _simple_ffmpeg.TranscodingContext_after_convert_video_get
    if _newclass:after_convert_video = _swig_property(_simple_ffmpeg.TranscodingContext_after_convert_video_get, _simple_ffmpeg.TranscodingContext_after_convert_video_set)
    __swig_setmethods__["before_encode_video"] = _simple_ffmpeg.TranscodingContext_before_encode_video_set
    __swig_getmethods__["before_encode_video"] = _simple_ffmpeg.TranscodingContext_before_encode_video_get
    if _newclass:before_encode_video = _swig_property(_simple_ffmpeg.TranscodingContext_before_encode_video_get, _simple_ffmpeg.TranscodingContext_before_encode_video_set)
    __swig_setmethods__["after_encode_video"] = _simple_ffmpeg.TranscodingContext_after_encode_video_set
    __swig_getmethods__["after_encode_video"] = _simple_ffmpeg.TranscodingContext_after_encode_video_get
    if _newclass:after_encode_video = _swig_property(_simple_ffmpeg.TranscodingContext_after_encode_video_get, _simple_ffmpeg.TranscodingContext_after_encode_video_set)
    __swig_setmethods__["before_decode_audio"] = _simple_ffmpeg.TranscodingContext_before_decode_audio_set
    __swig_getmethods__["before_decode_audio"] = _simple_ffmpeg.TranscodingContext_before_decode_audio_get
    if _newclass:before_decode_audio = _swig_property(_simple_ffmpeg.TranscodingContext_before_decode_audio_get, _simple_ffmpeg.TranscodingContext_before_decode_audio_set)
    __swig_setmethods__["after_decode_audio"] = _simple_ffmpeg.TranscodingContext_after_decode_audio_set
    __swig_getmethods__["after_decode_audio"] = _simple_ffmpeg.TranscodingContext_after_decode_audio_get
    if _newclass:after_decode_audio = _swig_property(_simple_ffmpeg.TranscodingContext_after_decode_audio_get, _simple_ffmpeg.TranscodingContext_after_decode_audio_set)
    __swig_setmethods__["after_convert_audio"] = _simple_ffmpeg.TranscodingContext_after_convert_audio_set
    __swig_getmethods__["after_convert_audio"] = _simple_ffmpeg.TranscodingContext_after_convert_audio_get
    if _newclass:after_convert_audio = _swig_property(_simple_ffmpeg.TranscodingContext_after_convert_audio_get, _simple_ffmpeg.TranscodingContext_after_convert_audio_set)
    __swig_setmethods__["before_encode_audio"] = _simple_ffmpeg.TranscodingContext_before_encode_audio_set
    __swig_getmethods__["before_encode_audio"] = _simple_ffmpeg.TranscodingContext_before_encode_audio_get
    if _newclass:before_encode_audio = _swig_property(_simple_ffmpeg.TranscodingContext_before_encode_audio_get, _simple_ffmpeg.TranscodingContext_before_encode_audio_set)
    __swig_setmethods__["after_encode_audio"] = _simple_ffmpeg.TranscodingContext_after_encode_audio_set
    __swig_getmethods__["after_encode_audio"] = _simple_ffmpeg.TranscodingContext_after_encode_audio_get
    if _newclass:after_encode_audio = _swig_property(_simple_ffmpeg.TranscodingContext_after_encode_audio_get, _simple_ffmpeg.TranscodingContext_after_encode_audio_set)
    __swig_setmethods__["first_vpts"] = _simple_ffmpeg.TranscodingContext_first_vpts_set
    __swig_getmethods__["first_vpts"] = _simple_ffmpeg.TranscodingContext_first_vpts_get
    if _newclass:first_vpts = _swig_property(_simple_ffmpeg.TranscodingContext_first_vpts_get, _simple_ffmpeg.TranscodingContext_first_vpts_set)
    __swig_setmethods__["first_apts"] = _simple_ffmpeg.TranscodingContext_first_apts_set
    __swig_getmethods__["first_apts"] = _simple_ffmpeg.TranscodingContext_first_apts_get
    if _newclass:first_apts = _swig_property(_simple_ffmpeg.TranscodingContext_first_apts_get, _simple_ffmpeg.TranscodingContext_first_apts_set)
    def __init__(self): 
        this = _simple_ffmpeg.new_TranscodingContext()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simple_ffmpeg.delete_TranscodingContext
    __del__ = lambda self : None;
TranscodingContext_swigregister = _simple_ffmpeg.TranscodingContext_swigregister
TranscodingContext_swigregister(TranscodingContext)


def build_transcoding_context(*args):
  return _simple_ffmpeg.build_transcoding_context(*args)
build_transcoding_context = _simple_ffmpeg.build_transcoding_context

def close_source(*args):
  return _simple_ffmpeg.close_source(*args)
close_source = _simple_ffmpeg.close_source

def close_output(*args):
  return _simple_ffmpeg.close_output(*args)
close_output = _simple_ffmpeg.close_output

def close_transcoding_context(*args):
  return _simple_ffmpeg.close_transcoding_context(*args)
close_transcoding_context = _simple_ffmpeg.close_transcoding_context

def sff_register_all():
  return _simple_ffmpeg.sff_register_all()
sff_register_all = _simple_ffmpeg.sff_register_all

def sff_network_init():
  return _simple_ffmpeg.sff_network_init()
sff_network_init = _simple_ffmpeg.sff_network_init

def sff_dump_format(*args):
  return _simple_ffmpeg.sff_dump_format(*args)
sff_dump_format = _simple_ffmpeg.sff_dump_format

def sff_write_header(*args):
  return _simple_ffmpeg.sff_write_header(*args)
sff_write_header = _simple_ffmpeg.sff_write_header

def sff_write_trailer(*args):
  return _simple_ffmpeg.sff_write_trailer(*args)
sff_write_trailer = _simple_ffmpeg.sff_write_trailer
# This file is compatible with both classic and new-style classes.


