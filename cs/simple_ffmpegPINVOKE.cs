/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

class simple_ffmpegPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("simple_ffmpeg", EntryPoint="SWIGRegisterExceptionCallbacks_simple_ffmpeg")]
    public static extern void SWIGRegisterExceptionCallbacks_simple_ffmpeg(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("simple_ffmpeg", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_simple_ffmpeg")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_simple_ffmpeg(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_simple_ffmpeg(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_simple_ffmpeg(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(simple_ffmpegPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(simple_ffmpegPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("simple_ffmpeg", EntryPoint="SWIGRegisterStringCallback_simple_ffmpeg")]
    public static extern void SWIGRegisterStringCallback_simple_ffmpeg(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_simple_ffmpeg(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static simple_ffmpegPINVOKE() {
  }


  [DllImport("simple_ffmpeg", EntryPoint="CSharp_die")]
  public static extern void die(string jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_video_st_set")]
  public static extern void SourceOrDestinatio_video_st_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_video_st_get")]
  public static extern IntPtr SourceOrDestinatio_video_st_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_audio_st_set")]
  public static extern void SourceOrDestinatio_audio_st_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_audio_st_get")]
  public static extern IntPtr SourceOrDestinatio_audio_st_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_video_set")]
  public static extern void SourceOrDestinatio_video_set(HandleRef jarg1, int jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_video_get")]
  public static extern int SourceOrDestinatio_video_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_audio_set")]
  public static extern void SourceOrDestinatio_audio_set(HandleRef jarg1, int jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_audio_get")]
  public static extern int SourceOrDestinatio_audio_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_url_set")]
  public static extern void SourceOrDestinatio_url_set(HandleRef jarg1, string jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_url_get")]
  public static extern string SourceOrDestinatio_url_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_vc_set")]
  public static extern void SourceOrDestinatio_vc_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_vc_get")]
  public static extern IntPtr SourceOrDestinatio_vc_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_ac_set")]
  public static extern void SourceOrDestinatio_ac_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_ac_get")]
  public static extern IntPtr SourceOrDestinatio_ac_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_vctx_set")]
  public static extern void SourceOrDestinatio_vctx_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_vctx_get")]
  public static extern IntPtr SourceOrDestinatio_vctx_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_actx_set")]
  public static extern void SourceOrDestinatio_actx_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_actx_get")]
  public static extern IntPtr SourceOrDestinatio_actx_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_ctx_set")]
  public static extern void SourceOrDestinatio_ctx_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_SourceOrDestinatio_ctx_get")]
  public static extern IntPtr SourceOrDestinatio_ctx_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_new_SourceOrDestinatio")]
  public static extern IntPtr new_SourceOrDestinatio();

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_delete_SourceOrDestinatio")]
  public static extern void delete_SourceOrDestinatio(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_open_input_source")]
  public static extern IntPtr open_input_source(string jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_get_video_stream")]
  public static extern int get_video_stream(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_get_audio_stream")]
  public static extern int get_audio_stream(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_alloc_audio_frame")]
  public static extern IntPtr alloc_audio_frame(int jarg1, HandleRef jarg2, int jarg3, int jarg4, int jarg5);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_build_audio_swr")]
  public static extern IntPtr build_audio_swr(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_open_source")]
  public static extern IntPtr open_source(string jarg1, int jarg2, int jarg3);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_open_output")]
  public static extern IntPtr open_output(string jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, int jarg5, int jarg6);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_sff_open_output")]
  public static extern IntPtr sff_open_output(string jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, int jarg5, int jarg6);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_swr_ctx_set")]
  public static extern void TranscodingContext_swr_ctx_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_swr_ctx_get")]
  public static extern IntPtr TranscodingContext_swr_ctx_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_sws_ctx_set")]
  public static extern void TranscodingContext_sws_ctx_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_sws_ctx_get")]
  public static extern IntPtr TranscodingContext_sws_ctx_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_curr_packet_set")]
  public static extern void TranscodingContext_curr_packet_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_curr_packet_get")]
  public static extern IntPtr TranscodingContext_curr_packet_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_video_packet_set")]
  public static extern void TranscodingContext_video_packet_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_video_packet_get")]
  public static extern IntPtr TranscodingContext_video_packet_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_copy_current_packet_set")]
  public static extern void TranscodingContext_copy_current_packet_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_copy_current_packet_get")]
  public static extern IntPtr TranscodingContext_copy_current_packet_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_audio_packet_set")]
  public static extern void TranscodingContext_audio_packet_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_audio_packet_get")]
  public static extern IntPtr TranscodingContext_audio_packet_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_ivframe_set")]
  public static extern void TranscodingContext_ivframe_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_ivframe_get")]
  public static extern IntPtr TranscodingContext_ivframe_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_ovframe_set")]
  public static extern void TranscodingContext_ovframe_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_ovframe_get")]
  public static extern IntPtr TranscodingContext_ovframe_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_iaframe_set")]
  public static extern void TranscodingContext_iaframe_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_iaframe_get")]
  public static extern IntPtr TranscodingContext_iaframe_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_oaframe_set")]
  public static extern void TranscodingContext_oaframe_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_oaframe_get")]
  public static extern IntPtr TranscodingContext_oaframe_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_dest_pict_buffer_size_set")]
  public static extern void TranscodingContext_dest_pict_buffer_size_set(HandleRef jarg1, int jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_dest_pict_buffer_size_get")]
  public static extern int TranscodingContext_dest_pict_buffer_size_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_dest_pict_buffer_set")]
  public static extern void TranscodingContext_dest_pict_buffer_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_dest_pict_buffer_get")]
  public static extern IntPtr TranscodingContext_dest_pict_buffer_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_internal_ptr_set")]
  public static extern void TranscodingContext_internal_ptr_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_internal_ptr_get")]
  public static extern IntPtr TranscodingContext_internal_ptr_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_before_decode_video_set")]
  public static extern void TranscodingContext_before_decode_video_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_before_decode_video_get")]
  public static extern IntPtr TranscodingContext_before_decode_video_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_decode_video_set")]
  public static extern void TranscodingContext_after_decode_video_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_decode_video_get")]
  public static extern IntPtr TranscodingContext_after_decode_video_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_convert_video_set")]
  public static extern void TranscodingContext_after_convert_video_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_convert_video_get")]
  public static extern IntPtr TranscodingContext_after_convert_video_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_before_encode_video_set")]
  public static extern void TranscodingContext_before_encode_video_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_before_encode_video_get")]
  public static extern IntPtr TranscodingContext_before_encode_video_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_encode_video_set")]
  public static extern void TranscodingContext_after_encode_video_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_encode_video_get")]
  public static extern IntPtr TranscodingContext_after_encode_video_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_before_decode_audio_set")]
  public static extern void TranscodingContext_before_decode_audio_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_before_decode_audio_get")]
  public static extern IntPtr TranscodingContext_before_decode_audio_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_decode_audio_set")]
  public static extern void TranscodingContext_after_decode_audio_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_decode_audio_get")]
  public static extern IntPtr TranscodingContext_after_decode_audio_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_convert_audio_set")]
  public static extern void TranscodingContext_after_convert_audio_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_convert_audio_get")]
  public static extern IntPtr TranscodingContext_after_convert_audio_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_before_encode_audio_set")]
  public static extern void TranscodingContext_before_encode_audio_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_before_encode_audio_get")]
  public static extern IntPtr TranscodingContext_before_encode_audio_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_encode_audio_set")]
  public static extern void TranscodingContext_after_encode_audio_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_after_encode_audio_get")]
  public static extern IntPtr TranscodingContext_after_encode_audio_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_first_vpts_set")]
  public static extern void TranscodingContext_first_vpts_set(HandleRef jarg1, int jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_first_vpts_get")]
  public static extern int TranscodingContext_first_vpts_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_first_apts_set")]
  public static extern void TranscodingContext_first_apts_set(HandleRef jarg1, int jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_TranscodingContext_first_apts_get")]
  public static extern int TranscodingContext_first_apts_get(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_new_TranscodingContext")]
  public static extern IntPtr new_TranscodingContext();

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_delete_TranscodingContext")]
  public static extern void delete_TranscodingContext(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_build_transcoding_context")]
  public static extern IntPtr build_transcoding_context(HandleRef jarg1, HandleRef jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_close_source")]
  public static extern int close_source(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_close_output")]
  public static extern int close_output(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_close_transcoding_context")]
  public static extern int close_transcoding_context(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_sff_register_all")]
  public static extern void sff_register_all();

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_sff_network_init")]
  public static extern int sff_network_init();

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_sff_dump_format")]
  public static extern void sff_dump_format(HandleRef jarg1, string jarg2);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_sff_write_header")]
  public static extern int sff_write_header(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_sff_write_trailer")]
  public static extern int sff_write_trailer(HandleRef jarg1);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_process_video_packet")]
  public static extern int process_video_packet(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_process_audio_packet")]
  public static extern int process_audio_packet(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("simple_ffmpeg", EntryPoint="CSharp_transcode")]
  public static extern int transcode(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);
}
